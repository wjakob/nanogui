cmake_minimum_required (VERSION 2.8.12)

# Create header for C file
file(WRITE ${OUTPUT_C} "/* Autogenerated by bin2c */

#include <nanogui/resources.h>
#include <nanovg.h>
#include <map>
#include <string>
#include <stdint.h>

NAMESPACE_BEGIN(nanogui)

")

# Create the full header file
file(WRITE ${OUTPUT_H} "/* Autogenerated by bin2c */

#pragma once

#include <nanogui/common.h>
NAMESPACE_BEGIN(nanogui)

/* Pass-through method to call ``nvgCreateFontMem``.
 *
 * Parameters:
 *     - ctx: the NanoVG context (included in nanogui::Theme constructor).
 *     - fontName: the name to register (e.g., \"sans\" or \"sans-bold\").
 *     - fontSource: the *basename* of the font source (e.g., \"Roboto-Regular.ttf\").
 */
extern NANOGUI_EXPORT int createFontMem(NVGcontext *ctx, const std::string &fontName, const std::string &fontSource);

NAMESPACE_END(nanogui)
")

# Convert to CMake list to iterate with `foreach`
string(REPLACE "," ";" INPUT_LIST ${INPUT_FILES})
# Counter setup for populating FONT_MAP_DECL / FONT_MAP_DECL_PART
list(LENGTH INPUT_LIST NUM_FONTS)
set(FONT_COUNTER 0)
math(EXPR LAST_FONT_INDEX "${NUM_FONTS} - 1")

# Iterate through binary files files
foreach(bin ${INPUT_LIST})
  # Get short filename
  string(REGEX MATCH "([^/]+)$" filename ${bin})
  # Save short filename for static map key entries
  set(orig_filename ${filename})
  # Replace filename spaces & extension separator for C compatibility
  string(REGEX REPLACE "\\.| |-" "_" filename ${filename})
  # Convert to lower case
  string(TOLOWER ${filename} filename)
  # Read hex data from file
  file(READ ${bin} filedata HEX)
  # Convert hex data for C compatibility
  string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata ${filedata})
  # Append data to c file
  file(APPEND ${OUTPUT_C} "uint8_t ${filename}[] = {${filedata}};\n\n")
  file(APPEND ${OUTPUT_C} "uint32_t ${filename}_size = sizeof(${filename});\n\n")
  # Accumulate the static font map declaration string (written at end after loop)
  set(FONT_MAP_DECL_PART "    {\"${orig_filename}\", {${filename}, ${filename}_size}}")
  if (FONT_COUNTER LESS LAST_FONT_INDEX)
    set(FONT_MAP_DECL_PART "${FONT_MAP_DECL_PART},") # add comma if not last item
  endif()
  list(APPEND FONT_MAP_DECL "${FONT_MAP_DECL_PART}\n")
  math(EXPR FONT_COUNTER "${FONT_COUNTER} + 1")
endforeach()

# Create the static map of font filenames to the generated resources
# filename -> {uint8_t * [the embedded font], uint32_t [the sizeof the embedded font]}
file(APPEND ${OUTPUT_C} "std::map<const std::string, const std::pair<uint8_t *, uint32_t>> __nanogui_font_map = {\n")
foreach(part ${FONT_MAP_DECL})
  file(APPEND ${OUTPUT_C} "${part}")
endforeach()
file(APPEND ${OUTPUT_C} "};\n\n")

# Create the implementation of `createFontMem` to pass-through to `nvgCreateFontMem`
file(APPEND ${OUTPUT_C} "int createFontMem(NVGcontext *ctx, const std::string &fontName, const std::string &fontSource) {
    if (__nanogui_font_map.count(fontSource) > 0) {
        const auto &p = __nanogui_font_map[fontSource];
        return nvgCreateFontMem(ctx, fontName.c_str(), p.first, p.second, 0);
    }
    return -1;// signals error
}

NAMESPACE_END(nanogui)

")
